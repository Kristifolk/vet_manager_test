<?php
/* 14. puzzle 1. Задание 1
Создать функцию even_to_zero(int $number) Которая цифры на четных ПОЗИЦИЯХ занулит.
Например, из 12345 получается число 10305. Внимание! Важна позиция цифры, а не значение.
 puzzle 1. Задание 2
Создать функцию is_palindrome(string $word) которая выведет true если строка является
 палиндромом(читается одинаково в зад и вперед, например: шалаш) и иначе false.
Внимание! Обязательно включите в проверки русские слова "шалаш" и "такси".
 puzzle 1. Задание 3
Написать функцию array_double, которая принимает на вход массив чисел, например [1,2,3] и
 возвращает массив, в котором все числа умножены на 2, например [2, 4, 6]
*/
// Задание 1-4
//Легко? - тогда попробуйте решить задачи так, чтобы тело всех функций начиналось с return.
//Не используйте call_user_func.
//assert(...);
//function even_to_zero(int $number): int
//{
//  return ...
//}


function even_to_zero(int $number): int
{
    return intval(implode(array_replace(str_split($number), [1 => 0, 3 => 0])));
}

var_dump(even_to_zero(12345));

assert(even_to_zero(12345) === 10305, "Ожидается, что цифры на четных позициях являются нулем");



function is_palindrome(string $word): bool
{
    return empty(array_diff_assoc(array_reverse(mb_str_split($word)), mb_str_split($word)));
}

var_dump(is_palindrome("шалаш"));

assert(is_palindrome("wow"), "Ожидается,что аргумент функции полиндромом. Слово 'wow' является полиндромом");
assert(!is_palindrome("woww"), "Ожидается,что аргумент функции полиндромом. Слово 'woww' не является полиндромом");
assert(is_palindrome("шалаш"), "Ожидается,что аргумент функции полиндромом. Слово 'шалаш' является полиндромом");
assert(!is_palindrome("Шалаш"), "Ожидается,что аргумент функции полиндромом. Но в  слове 'Шалаш' разный регистр и он не совсем полиндром");
assert(is_palindrome("шaлaш"), "Ожидается,что аргумент функции полиндромом. Слово 'шaлaш' является полиндромом, не смотря на то что буквы 'a' являются латиницей, а остальные кириллица");
assert(!is_palindrome("шалaш"), "Ожидается,что аргумент функции полиндромом. Слово 'шалaш' не является полиндромом, тк первая буква 'а' это кириллица, последяя буква 'a' является латиницей");
assert(!is_palindrome("такси"), "Ожидается,что аргумент функции полиндромом. Слово 'такси' не является полиндромом");
assert(is_palindrome("топот"), "Ожидается,что аргумент функции полиндромом. Слово 'топот' является полиндромом");

$arr = [1, 2, 3];
function array_double(array $arr): array {
    return array_map(fn($n) => $n * 2, $arr);
}

print_r(array_double($arr));

assert(array_double([1, 2, 3]) === [2, 4, 6], "Ожидается,что функция вернет массив, в котором все числа умножены на 2");
assert(array_double([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], "Ожидается,что функция вернет массив, в котором все числа умножены на 2");
assert(array_double([]) === [], "Ожидается,что функция вернет пустой массив. В исходном массиве нет чисел");
assert(is_array([1, 2, 3]) && is_array(array_double([2, 4, 6])), "Ожидается передача массива в качестве аргумента функции и что функция вернет массив");
assert(is_array($arr) && is_array(array_double($arr)), "Ожидается передача массива в качестве аргумента функции и что функция вернет массив");
